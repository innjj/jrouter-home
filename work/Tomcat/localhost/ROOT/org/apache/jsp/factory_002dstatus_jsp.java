/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.17
 * Generated at: 2019-04-04 16:12:08 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.Arrays;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentSkipListMap;
import net.jrouter.ActionFactory;
import net.jrouter.ActionProxy;
import net.jrouter.annotation.Interceptor;
import net.jrouter.annotation.Result;
import net.jrouter.impl.*;

public final class factory_002dstatus_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("net.jrouter.impl");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("net.jrouter.annotation.Interceptor");
    _jspx_imports_classes.add("java.util.Arrays");
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("java.util.concurrent.ConcurrentSkipListMap");
    _jspx_imports_classes.add("java.util.Iterator");
    _jspx_imports_classes.add("java.util.Map");
    _jspx_imports_classes.add("net.jrouter.ActionFactory");
    _jspx_imports_classes.add("net.jrouter.ActionProxy");
    _jspx_imports_classes.add("net.jrouter.annotation.Result");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, false, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n");
      out.write("<html xmlns=\"http://www.w3.org/1999/xhtml\">\n");
      out.write("    <head>\n");
      out.write("        <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"/>\n");
      out.write("        <title>factory-status</title>\n");
      out.write("    </head>\n");
      out.write("    <body>\n");
      out.write("        <h1>factory-status</h1>\n");
      out.write("        <a href=\"#Actions\">Actions</a><br/>\n");
      out.write("        <a href=\"#InterceptorStacks\">InterceptorStacks</a><br/>\n");
      out.write("        <a href=\"#ResultTypes\">ResultTypes</a><br/>\n");
      out.write("        <a href=\"#Results\">Results</a><br/>\n");
      out.write("        <a href=\"#Interceptors\">Interceptors</a><br/>\n");
      out.write("        <a href=\"#ActionsCache\">ActionsCache</a><br/>\n");
      out.write("        <hr/>\n");
      out.write("        ");

            //out.write(ServletActionContext.getContext()+"<br/>");
            String name = "jrouter_factory";

            ActionFactory af = (ActionFactory) application.getAttribute(name);
            if (af == null) {
                out.write("No \"" + name + "\" Attribute in ServletActionContext");
                return;
            }
            out.write(af + "<br/>");
            out.write("DefaultInterceptorStack : " + af.getDefaultInterceptorStack() + "<br/>");
            out.write("DefaultResultType : " + af.getDefaultResultType() + "<br/>");
            out.write("ObjectFactory : " + af.getObjectFactory() + "<br/>");
            out.write("MethodInvokerFactory : " + af.getMethodInvokerFactory() + "<br/>");
            out.write("ConverterFactory : " + af.getConverterFactory() + "<br/>");

            //InterceptorStacks
            out.write("<a name='InterceptorStacks'><h2>InterceptorStacks : </h2></a>");
            Map<String, InterceptorStackProxy> interceptorStacks = new ConcurrentSkipListMap(af.getInterceptorStacks());
            for (InterceptorStackProxy is : interceptorStacks.values()) {
                out.write(is.getName() + " : " + is.getFieldName() + "<br/>");
                List<InterceptorProxy> ips = is.getInterceptors();
                if (ips != null)
                    for (int i = 0; i < ips.size(); i++) {
                        out.write("Interceptor " + (1 + i) + " : " + ips.get(i).getName() + " ---> " + ips.get(i).getMethod() + "<br/>");
                    }
                out.write("<br/>----------------------------------------------------------------------------------------------------------------<br/>");
            }
            out.write("<hr/>");

            //Actions
            out.write("<a name='Actions'><h2>Actions : </h2></a>");
            Map<String, ActionProxy> actions = new ConcurrentSkipListMap(af.getActions());
            for (Map.Entry<String, ActionProxy> ae : actions.entrySet()) {

                String url = ae.getKey();

                ActionProxy ap = ae.getValue();
                out.write("<a href='javascript:'>" + url + "</a> ---> " + ap.getMethodInfo() + "<br/>");

                Map<String, String[]> aps = ap.getActionParameters();
                if (!aps.isEmpty()) {
                    out.write("Action Parameters : ");
                    Iterator<Map.Entry<String, String[]>> it = aps.entrySet().iterator();
                    while (it.hasNext()) {
                        Map.Entry<String, String[]> e = it.next();
                        out.write(e.getKey() + "=" + Arrays.toString(e.getValue()));
                        if (it.hasNext())
                            out.write(", ");
                    }
                    out.write("<br/>");
                    out.write("- - - - - - - - - - - - - - - - - - - - - - - - - - - -- - - - - - - - - - - - - - - - - - - - - - - - - - - -<br/> ");
                }
                List<Interceptor> ips = ap.getInterceptors();
                if (ips != null)
                    for (int i = 0; i < ips.size(); i++) {
                        InterceptorProxy ip = (InterceptorProxy) (af.getInterceptors().get(ips.get(i).name()));
                        out.write("Interceptor " + (1 + i) + " : " + ip.getName() + " ---> " + ip.getMethod() + "<br/>");
                    }
                out.write("- - - - - - - - - - - - - - - - - - - - - - - - - - - -- - - - - - - - - - - - - - - - - - - - - - - - - - - -<br/> ");
                Map<String, Result> rs = ap.getResults();
                for (Result r : rs.values()) {
                    out.write("Result : " + r.name() + " ---> " + r + "<br/>");
                }

                out.write("<br/>----------------------------------------------------------------------------------------------------------------<br/>");

            }
            out.write("<hr/>");

            //ResultTypes
            out.write("<a name='ResultTypes'><h2>ResultTypes : </h2></a>");
            Map<String, ResultTypeProxy> rts = new ConcurrentSkipListMap(af.getResultTypes());
            for (ResultTypeProxy rt : rts.values()) {
                out.write("ResultType : " + rt.getType() + " ---> " + rt.getMethod() + "<br/>");
                out.write("- - - - - - - - - - - - - - - - - - - - - - - - - - - -- - - - - - - - - - - - - - - - - - - - - - - - - - - -<br/> ");
            }
            out.write("<hr/>");

            //Result
            out.write("<a name='Results'><h2>Results : </h2></a>");
            Map<String, ResultProxy> rs = new ConcurrentSkipListMap(af.getResults());
            for (ResultProxy r : rs.values()) {
                out.write("Result : " + r.getResult().name() + " ---> " + r.getMethod() + "<br/>");
                out.write("- - - - - - - - - - - - - - - - - - - - - - - - - - - -- - - - - - - - - - - - - - - - - - - - - - - - - - - -<br/> ");
            }
            out.write("<hr/>");

            //Interceptors
            out.write("<a name='Interceptors'><h2>Interceptors : </h2></a>");
            Map<String, InterceptorProxy> ips = new ConcurrentSkipListMap(af.getInterceptors());
            for (InterceptorProxy ip : ips.values()) {
                out.write("Interceptor : " + ip.getName() + " ---> " + ip.getMethod() + "<br/>");
                out.write("- - - - - - - - - - - - - - - - - - - - - - - - - - - -- - - - - - - - - - - - - - - - - - - - - - - - - - - -<br/> ");
            }
            out.write("<hr/>");

            out.write("<a name='ActionsCache'><h2>ActionsCache : </h2></a>");
            if (af instanceof PathActionFactory) {
                Map<String, Object> cache = ((PathActionFactory) af).getActionCache();
                for (Map.Entry<String, Object> e : cache.entrySet()) {
                    out.write("ActionCache : " + e.getKey() + " ---> " + e.getValue() + "<br/>");
                    out.write("- - - - - - - - - - - - - - - - - - - - - - - - - - - -- - - - - - - - - - - - - - - - - - - - - - - - - - - -<br/> ");
                }
            } else {
                out.write("Not Support <br/>");
            }

            out.write("<hr/>");
            //THE END
        
      out.write("\n");
      out.write("    </body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
